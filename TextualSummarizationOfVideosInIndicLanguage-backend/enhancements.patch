import random
import time

# Enhanced model support
SUPPORTED_MODELS = {
    "summarization": ["facebook/bart-large-cnn", "google/pegasus-xsum"],
    "transcription": ["openai/whisper-large", "facebook/wav2vec2-large"]
}

# Global metrics storage
processing_metrics = {
    "total_requests": 0,
    "successful_requests": 0,
    "average_processing_time": 0,
    "last_processed": None
}
app_start_time = time.time()

@app.route("/api/models", methods=["GET"])
def get_models():
    return jsonify({
        "status": "success",
        "models": SUPPORTED_MODELS,
        "current_model": {
            "summarization": "facebook/bart-large-cnn",
            "transcription": "openai/whisper-large"
        }
    })

@app.route("/api/metrics", methods=["GET"])
def get_performance_metrics():
    return jsonify({
        "status": "success",
        "metrics": processing_metrics,
        "uptime_hours": round((time.time() - app_start_time) / 3600, 2)
    })

@app.route("/api/batch-summarize", methods=["POST"])
def batch_summarize():
    try:
        batch_data = request.get_json()
        videos = batch_data.get("videos", [])
        
        if not videos:
            return jsonify({"error": "No videos provided", "status": "error"}), 400
        
        results = []
        for video in videos:
            result = {
                "video_url": video.get("url", ""),
                "status": "processed",
                "summary": "Sample summary for batch processing - implement real processing here",
                "confidence_scores": {
                    "transcription_accuracy": round(random.uniform(0.85, 0.95), 2),
                    "summary_quality": round(random.uniform(0.8, 0.93), 2)
                }
            }
            results.append(result)
        
        return jsonify({
            "status": "success",
            "processed_count": len(results),
            "results": results
        })
        
    except Exception as e:
        return jsonify({"error": f"Batch processing failed: {str(e)}", "status": "error"}), 500
